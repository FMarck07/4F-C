---

### **Documentazione delle System Call**

#### **`open`**
```c
int open(const char *pathname, int flags);
```
- **Cosa fa:** Apre un file e restituisce un file descriptor (intero).  
- **Parametri:**
  - `pathname`: Percorso del file (relativo o assoluto).
  - `flags`: ModalitÃ  di apertura:
    - `O_RDONLY`: Sola lettura.
    - `O_WRONLY`: Sola scrittura.
    - `O_RDWR`: Lettura e scrittura.
    - Altri flag come `O_CREAT` (crea il file se non esiste).
- **Valore restituito:** 
  - File descriptor (intero positivo) se l'apertura ha successo.
  - `-1` in caso di errore (es. file inesistente o mancanza di permessi).

##### **Percorsi Relativi e Assoluti**
- **Percorso Relativo:** Parte dalla directory corrente (es: `./file.txt`).
- **Percorso Assoluto:** Parte dalla root (`/`) (es: `/tmp/file.txt`).
- **Comando utile:** `pwd` per ottenere il percorso assoluto della directory corrente.

---

#### **`close`**
```c
int close(int fd);
```
- **Cosa fa:** Chiude un file aperto usando il file descriptor `fd`.
- **Valore restituito:**
  - `0` se chiusura ha successo.
  - `-1` in caso di errore.

---

#### **`read`**
```c
ssize_t read(int fd, void *buf, size_t count);
```
- **Cosa fa:** Legge fino a `count` byte dal file descriptor `fd` e li memorizza nel buffer `buf`.
- **Parametri:**
  - `fd`: File descriptor del file aperto.
  - `buf`: Puntatore al buffer dove salvare i dati.
  - `count`: Numero massimo di byte da leggere.
- **Valore restituito:**
  - Numero di byte effettivamente letti.
  - `0` quando raggiunge la fine del file (EOF).
  - `-1` in caso di errore.

##### **Esempio di Lettura**
```c
char buffer[8];
int nRead;
while((nRead = read(fd, buffer, sizeof(buffer))) > 0) {
    write(1, buffer, nRead); // Scrive sullo standard output
}
```

---

#### **`write`**
```c
ssize_t write(int fd, const void *buf, size_t count);
```
- **Cosa fa:** Scrive fino a `count` byte dal buffer `buf` nel file o dispositivo rappresentato da `fd`.
- **Parametri:**
  - `fd`: File descriptor del file di destinazione.
  - `buf`: Puntatore al buffer da scrivere.
  - `count`: Numero massimo di byte da scrivere.
- **Valore restituito:**
  - Numero di byte scritti.
  - `-1` in caso di errore.

##### **Esempio di Scrittura**
```c
char *msg = "Hello, World!";
write(1, msg, strlen(msg)); // Scrive sullo standard output
```

---

#### **Tabella dei File Descriptor**
| Dispositivo         | Nome Symbolico | File Descriptor |
|---------------------|----------------|-----------------|
| Standard Input      | `stdin`        | `0`             |
| Standard Output     | `stdout`       | `1`             |
| Standard Error      | `stderr`       | `2`             |

---

### **Esercizi**

#### **Esercizio 1: Simulazione del Comando `cat`**
```c
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Numero argomenti invalido.\n");
        return -1;
    }

    int fd = open(argv[1], O_RDONLY);
    if (fd == -1) {
        printf("Errore nell'apertura del file.\n");
        return -1;
    }

    char buffer[8];
    int nRead;

    // Leggi e scrivi fino a EOF
    while ((nRead = read(fd, buffer, sizeof(buffer))) > 0) {
        write(1, buffer, nRead); // Scrive sullo standard output
    }

    close(fd); // Chiude il file
    return 0;
}
```

---

#### **Esercizio 2: Lettura e Scrittura su un Altro File**
```c
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>

int main() {
    int fd1 = open("input.txt", O_RDONLY);
    if (fd1 == -1) {
        printf("Errore nell'apertura del file di input.\n");
        return -1;
    }

    int fd2 = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd2 == -1) {
        printf("Errore nell'apertura del file di output.\n");
        close(fd1);
        return -1;
    }

    char buffer[8];
    int nRead;

    // Leggi dal file di input e scrivi nel file di output
    while ((nRead = read(fd1, buffer, sizeof(buffer))) > 0) {
        write(fd2, buffer, nRead);
    }

    close(fd1);
    close(fd2);
    return 0;
}

### **Punti Chiave**
1. **Error Handling:** Sempre verificare i valori restituiti da `open`, `read`, `write`, e `close`.
2. **Buffering:** Usare buffer di dimensione ottimale (es. multipli di 8 o 16 byte).
3. **File Descriptor:** Ricorda che i file descriptor sono numeri interi univoci per ogni file aperto.
4. **System Call vs Standard Library:** Le system call (`read`, `write`) lavorano a un livello piÃ¹ basso rispetto alle funzioni della libreria standard (`fread`, `fwrite`).

Se hai dubbi su qualche parte, fammi sapere! ðŸ˜Š